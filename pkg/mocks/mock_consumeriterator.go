// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/typusomega/goethe/pkg/api (interfaces: ConsumerIterator)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	spec "github.com/typusomega/goethe/pkg/spec"
)

// MockConsumerIterator is a mock of ConsumerIterator interface
type MockConsumerIterator struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerIteratorMockRecorder
}

// MockConsumerIteratorMockRecorder is the mock recorder for MockConsumerIterator
type MockConsumerIteratorMockRecorder struct {
	mock *MockConsumerIterator
}

// NewMockConsumerIterator creates a new mock instance
func NewMockConsumerIterator(ctrl *gomock.Controller) *MockConsumerIterator {
	mock := &MockConsumerIterator{ctrl: ctrl}
	mock.recorder = &MockConsumerIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConsumerIterator) EXPECT() *MockConsumerIteratorMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockConsumerIterator) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockConsumerIteratorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConsumerIterator)(nil).Close))
}

// Next mocks base method
func (m *MockConsumerIterator) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockConsumerIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockConsumerIterator)(nil).Next))
}

// Value mocks base method
func (m *MockConsumerIterator) Value() (*spec.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(*spec.Cursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Value indicates an expected call of Value
func (mr *MockConsumerIteratorMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockConsumerIterator)(nil).Value))
}
