// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/typusomega/goethe/pkg/raft (interfaces: Cluster)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	spec "github.com/typusomega/goethe/pkg/spec"
)

// MockCluster is a mock of Cluster interface
type MockCluster struct {
	ctrl     *gomock.Controller
	recorder *MockClusterMockRecorder
}

// MockClusterMockRecorder is the mock recorder for MockCluster
type MockClusterMockRecorder struct {
	mock *MockCluster
}

// NewMockCluster creates a new mock instance
func NewMockCluster(ctrl *gomock.Controller) *MockCluster {
	mock := &MockCluster{ctrl: ctrl}
	mock.recorder = &MockClusterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCluster) EXPECT() *MockClusterMockRecorder {
	return m.recorder
}

// AddVoter mocks base method
func (m *MockCluster) AddVoter(arg0 string, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVoter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddVoter indicates an expected call of AddVoter
func (mr *MockClusterMockRecorder) AddVoter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVoter", reflect.TypeOf((*MockCluster)(nil).AddVoter), arg0, arg1)
}

// CommitCursor mocks base method
func (m *MockCluster) CommitCursor(arg0 *spec.Cursor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitCursor", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitCursor indicates an expected call of CommitCursor
func (mr *MockClusterMockRecorder) CommitCursor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitCursor", reflect.TypeOf((*MockCluster)(nil).CommitCursor), arg0)
}

// CommitEvent mocks base method
func (m *MockCluster) CommitEvent(arg0 *spec.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitEvent indicates an expected call of CommitEvent
func (mr *MockClusterMockRecorder) CommitEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitEvent", reflect.TypeOf((*MockCluster)(nil).CommitEvent), arg0)
}
