// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/typusomega/goethe/pkg/storage (interfaces: CursorStorage)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	spec "github.com/typusomega/goethe/pkg/spec"
)

// MockCursorStorage is a mock of CursorStorage interface
type MockCursorStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCursorStorageMockRecorder
}

// MockCursorStorageMockRecorder is the mock recorder for MockCursorStorage
type MockCursorStorageMockRecorder struct {
	mock *MockCursorStorage
}

// NewMockCursorStorage creates a new mock instance
func NewMockCursorStorage(ctrl *gomock.Controller) *MockCursorStorage {
	mock := &MockCursorStorage{ctrl: ctrl}
	mock.recorder = &MockCursorStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCursorStorage) EXPECT() *MockCursorStorageMockRecorder {
	return m.recorder
}

// GetCursorFor mocks base method
func (m *MockCursorStorage) GetCursorFor(arg0, arg1 string) (*spec.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCursorFor", arg0, arg1)
	ret0, _ := ret[0].(*spec.Cursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCursorFor indicates an expected call of GetCursorFor
func (mr *MockCursorStorageMockRecorder) GetCursorFor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCursorFor", reflect.TypeOf((*MockCursorStorage)(nil).GetCursorFor), arg0, arg1)
}

// SaveCursor mocks base method
func (m *MockCursorStorage) SaveCursor(arg0 *spec.Cursor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCursor", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCursor indicates an expected call of SaveCursor
func (mr *MockCursorStorageMockRecorder) SaveCursor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCursor", reflect.TypeOf((*MockCursorStorage)(nil).SaveCursor), arg0)
}
