// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/typusomega/goethe/pkg/api (interfaces: Consumer)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/typusomega/goethe/pkg/api"
	spec "github.com/typusomega/goethe/pkg/spec"
)

// MockConsumer is a mock of Consumer interface
type MockConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockConsumerMockRecorder
}

// MockConsumerMockRecorder is the mock recorder for MockConsumer
type MockConsumerMockRecorder struct {
	mock *MockConsumer
}

// NewMockConsumer creates a new mock instance
func NewMockConsumer(ctrl *gomock.Controller) *MockConsumer {
	mock := &MockConsumer{ctrl: ctrl}
	mock.recorder = &MockConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConsumer) EXPECT() *MockConsumerMockRecorder {
	return m.recorder
}

// Commit mocks base method
func (m *MockConsumer) Commit(arg0 *spec.Cursor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockConsumerMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockConsumer)(nil).Commit), arg0)
}

// GetIterator mocks base method
func (m *MockConsumer) GetIterator(arg0 *spec.Cursor) (api.ConsumerIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIterator", arg0)
	ret0, _ := ret[0].(api.ConsumerIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIterator indicates an expected call of GetIterator
func (mr *MockConsumerMockRecorder) GetIterator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIterator", reflect.TypeOf((*MockConsumer)(nil).GetIterator), arg0)
}
