// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/v1/goethe.proto

package spec

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PublishRequest struct {
	Topic                *Topic   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Event                *Event   `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishRequest) Reset()         { *m = PublishRequest{} }
func (m *PublishRequest) String() string { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()    {}
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e567c1cdd9caf08, []int{0}
}

func (m *PublishRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishRequest.Unmarshal(m, b)
}
func (m *PublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishRequest.Marshal(b, m, deterministic)
}
func (m *PublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishRequest.Merge(m, src)
}
func (m *PublishRequest) XXX_Size() int {
	return xxx_messageInfo_PublishRequest.Size(m)
}
func (m *PublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishRequest proto.InternalMessageInfo

func (m *PublishRequest) GetTopic() *Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *PublishRequest) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type PublishResponse struct {
	Topic                *Topic   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Event                *Event   `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublishResponse) Reset()         { *m = PublishResponse{} }
func (m *PublishResponse) String() string { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()    {}
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e567c1cdd9caf08, []int{1}
}

func (m *PublishResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublishResponse.Unmarshal(m, b)
}
func (m *PublishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublishResponse.Marshal(b, m, deterministic)
}
func (m *PublishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishResponse.Merge(m, src)
}
func (m *PublishResponse) XXX_Size() int {
	return xxx_messageInfo_PublishResponse.Size(m)
}
func (m *PublishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishResponse proto.InternalMessageInfo

func (m *PublishResponse) GetTopic() *Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *PublishResponse) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type Cursor struct {
	Topic                *Topic   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	ServiceId            string   `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	CurrentEvent         *Event   `protobuf:"bytes,3,opt,name=current_event,json=currentEvent,proto3" json:"current_event,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cursor) Reset()         { *m = Cursor{} }
func (m *Cursor) String() string { return proto.CompactTextString(m) }
func (*Cursor) ProtoMessage()    {}
func (*Cursor) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e567c1cdd9caf08, []int{2}
}

func (m *Cursor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cursor.Unmarshal(m, b)
}
func (m *Cursor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cursor.Marshal(b, m, deterministic)
}
func (m *Cursor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cursor.Merge(m, src)
}
func (m *Cursor) XXX_Size() int {
	return xxx_messageInfo_Cursor.Size(m)
}
func (m *Cursor) XXX_DiscardUnknown() {
	xxx_messageInfo_Cursor.DiscardUnknown(m)
}

var xxx_messageInfo_Cursor proto.InternalMessageInfo

func (m *Cursor) GetTopic() *Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *Cursor) GetServiceId() string {
	if m != nil {
		return m.ServiceId
	}
	return ""
}

func (m *Cursor) GetCurrentEvent() *Event {
	if m != nil {
		return m.CurrentEvent
	}
	return nil
}

type Event struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Topic                *Topic   `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Payload              []byte   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e567c1cdd9caf08, []int{3}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Event) GetTopic() *Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *Event) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Topic struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Topic) Reset()         { *m = Topic{} }
func (m *Topic) String() string { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()    {}
func (*Topic) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e567c1cdd9caf08, []int{4}
}

func (m *Topic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Topic.Unmarshal(m, b)
}
func (m *Topic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Topic.Marshal(b, m, deterministic)
}
func (m *Topic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Topic.Merge(m, src)
}
func (m *Topic) XXX_Size() int {
	return xxx_messageInfo_Topic.Size(m)
}
func (m *Topic) XXX_DiscardUnknown() {
	xxx_messageInfo_Topic.DiscardUnknown(m)
}

var xxx_messageInfo_Topic proto.InternalMessageInfo

func (m *Topic) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*PublishRequest)(nil), "io.typusomega.goethe.PublishRequest")
	proto.RegisterType((*PublishResponse)(nil), "io.typusomega.goethe.PublishResponse")
	proto.RegisterType((*Cursor)(nil), "io.typusomega.goethe.Cursor")
	proto.RegisterType((*Event)(nil), "io.typusomega.goethe.Event")
	proto.RegisterType((*Topic)(nil), "io.typusomega.goethe.Topic")
}

func init() { proto.RegisterFile("protos/v1/goethe.proto", fileDescriptor_1e567c1cdd9caf08) }

var fileDescriptor_1e567c1cdd9caf08 = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x93, 0xdf, 0x4a, 0xf3, 0x40,
	0x10, 0xc5, 0xbf, 0xe4, 0xa3, 0x29, 0x1d, 0x6b, 0x85, 0x45, 0xb4, 0x54, 0x05, 0x09, 0x16, 0x7b,
	0x95, 0xd8, 0xfa, 0x02, 0xa2, 0x88, 0xe8, 0x95, 0x44, 0xaf, 0x44, 0x28, 0x69, 0x76, 0x48, 0x17,
	0xdb, 0xee, 0xba, 0x7f, 0x22, 0x7d, 0x17, 0x9f, 0xc2, 0x27, 0x94, 0xee, 0x46, 0x8b, 0x12, 0x5a,
	0xf1, 0xc2, 0xbb, 0xec, 0xcc, 0xef, 0xcc, 0x39, 0x30, 0x13, 0xd8, 0x11, 0x92, 0x6b, 0xae, 0xe2,
	0xa2, 0x1f, 0xe7, 0x1c, 0xf5, 0x18, 0x23, 0x5b, 0x20, 0xdb, 0x8c, 0x47, 0x7a, 0x2e, 0x8c, 0xe2,
	0x53, 0xcc, 0xd3, 0xc8, 0xf5, 0xc2, 0x02, 0x5a, 0xb7, 0x66, 0x34, 0x61, 0x6a, 0x9c, 0xe0, 0xb3,
	0x41, 0xa5, 0x49, 0x1f, 0x6a, 0x9a, 0x0b, 0x96, 0xb5, 0xbd, 0x43, 0xaf, 0xb7, 0x31, 0xd8, 0x8b,
	0xaa, 0x74, 0xd1, 0xfd, 0x02, 0x49, 0x1c, 0xb9, 0x90, 0x60, 0x81, 0x33, 0xdd, 0xf6, 0x57, 0x49,
	0x2e, 0x17, 0x48, 0xe2, 0xc8, 0xf0, 0x05, 0xb6, 0x3e, 0x7d, 0x95, 0xe0, 0x33, 0x85, 0x7f, 0x64,
	0xfc, 0xea, 0x41, 0x70, 0x61, 0xa4, 0xe2, 0xf2, 0x37, 0x86, 0x07, 0x00, 0x0a, 0x65, 0xc1, 0x32,
	0x1c, 0x32, 0x6a, 0x5d, 0x1b, 0x49, 0xa3, 0xac, 0x5c, 0x53, 0x72, 0x06, 0x9b, 0x99, 0x91, 0x12,
	0x67, 0x7a, 0xe8, 0x72, 0xfd, 0x5f, 0x9f, 0xab, 0x59, 0x2a, 0xec, 0x2b, 0xa4, 0x50, 0xb3, 0x1f,
	0xa4, 0x05, 0x3e, 0xa3, 0x36, 0x59, 0x23, 0xf1, 0x19, 0x5d, 0x86, 0xf5, 0x7f, 0x1c, 0xb6, 0x0d,
	0x75, 0x91, 0xce, 0x27, 0x3c, 0xa5, 0x36, 0x47, 0x33, 0xf9, 0x78, 0x86, 0xbb, 0x50, 0xb3, 0xe4,
	0x77, 0x97, 0xc1, 0x9b, 0x07, 0xc1, 0x95, 0x1d, 0x45, 0x1e, 0xa1, 0x5e, 0x6e, 0x88, 0x1c, 0x55,
	0x9b, 0x7d, 0x3d, 0x9c, 0x4e, 0x77, 0x0d, 0xe5, 0xd6, 0x1c, 0xfe, 0xeb, 0x79, 0x27, 0x1e, 0xb9,
	0x81, 0xe0, 0x4e, 0x4b, 0x4c, 0xa7, 0x64, 0xbf, 0x5a, 0xe6, 0x76, 0xd4, 0x59, 0xd9, 0x75, 0xb3,
	0xce, 0x8f, 0x1f, 0xba, 0x39, 0xd3, 0x63, 0x33, 0x8a, 0x32, 0x3e, 0x8d, 0x97, 0x70, 0x79, 0xff,
	0xb1, 0x78, 0xca, 0x63, 0x25, 0x30, 0x1b, 0x05, 0xf6, 0x4f, 0x38, 0x7d, 0x0f, 0x00, 0x00, 0xff,
	0xff, 0x3e, 0x27, 0x7e, 0x11, 0x23, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GoetheClient is the client API for Goethe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GoetheClient interface {
	Publish(ctx context.Context, opts ...grpc.CallOption) (Goethe_PublishClient, error)
	Stream(ctx context.Context, opts ...grpc.CallOption) (Goethe_StreamClient, error)
}

type goetheClient struct {
	cc *grpc.ClientConn
}

func NewGoetheClient(cc *grpc.ClientConn) GoetheClient {
	return &goetheClient{cc}
}

func (c *goetheClient) Publish(ctx context.Context, opts ...grpc.CallOption) (Goethe_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Goethe_serviceDesc.Streams[0], "/io.typusomega.goethe.Goethe/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &goethePublishClient{stream}
	return x, nil
}

type Goethe_PublishClient interface {
	Send(*PublishRequest) error
	Recv() (*PublishResponse, error)
	grpc.ClientStream
}

type goethePublishClient struct {
	grpc.ClientStream
}

func (x *goethePublishClient) Send(m *PublishRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *goethePublishClient) Recv() (*PublishResponse, error) {
	m := new(PublishResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *goetheClient) Stream(ctx context.Context, opts ...grpc.CallOption) (Goethe_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Goethe_serviceDesc.Streams[1], "/io.typusomega.goethe.Goethe/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &goetheStreamClient{stream}
	return x, nil
}

type Goethe_StreamClient interface {
	Send(*Cursor) error
	Recv() (*Cursor, error)
	grpc.ClientStream
}

type goetheStreamClient struct {
	grpc.ClientStream
}

func (x *goetheStreamClient) Send(m *Cursor) error {
	return x.ClientStream.SendMsg(m)
}

func (x *goetheStreamClient) Recv() (*Cursor, error) {
	m := new(Cursor)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GoetheServer is the server API for Goethe service.
type GoetheServer interface {
	Publish(Goethe_PublishServer) error
	Stream(Goethe_StreamServer) error
}

// UnimplementedGoetheServer can be embedded to have forward compatible implementations.
type UnimplementedGoetheServer struct {
}

func (*UnimplementedGoetheServer) Publish(srv Goethe_PublishServer) error {
	return status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (*UnimplementedGoetheServer) Stream(srv Goethe_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}

func RegisterGoetheServer(s *grpc.Server, srv GoetheServer) {
	s.RegisterService(&_Goethe_serviceDesc, srv)
}

func _Goethe_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GoetheServer).Publish(&goethePublishServer{stream})
}

type Goethe_PublishServer interface {
	Send(*PublishResponse) error
	Recv() (*PublishRequest, error)
	grpc.ServerStream
}

type goethePublishServer struct {
	grpc.ServerStream
}

func (x *goethePublishServer) Send(m *PublishResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *goethePublishServer) Recv() (*PublishRequest, error) {
	m := new(PublishRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Goethe_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GoetheServer).Stream(&goetheStreamServer{stream})
}

type Goethe_StreamServer interface {
	Send(*Cursor) error
	Recv() (*Cursor, error)
	grpc.ServerStream
}

type goetheStreamServer struct {
	grpc.ServerStream
}

func (x *goetheStreamServer) Send(m *Cursor) error {
	return x.ServerStream.SendMsg(m)
}

func (x *goetheStreamServer) Recv() (*Cursor, error) {
	m := new(Cursor)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Goethe_serviceDesc = grpc.ServiceDesc{
	ServiceName: "io.typusomega.goethe.Goethe",
	HandlerType: (*GoetheServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _Goethe_Publish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Stream",
			Handler:       _Goethe_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/v1/goethe.proto",
}
